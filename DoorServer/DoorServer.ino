/*
  Web Server

 A simple webserver that, when run on the hardware at
 BitBlueprint, is capable of opening the door when
 a user provides a valid hash. 

 Circuit:
 * Ethernet shield attached to pins 10, 11, 12, 13
 * Door relay attachced to pin 3.
 * Pin 4 disconnected.
 * Analog inputs attached to pins A0 through A5 (optional)

 created 18 Dec 2009
 by David A. Mellis
 modified 9 Apr 2012
 by Tom Igoe
 modified November 11 2014
 by Niles Christensen

 */

#include <sha256.h>
#include <SPI.h>
#include <Ethernet.h>
#include "password.h"


// currentNumber is the last random number that was generated by the arduino
// in response to someone requesting access without first having a random number.
// It is used to reduce the probability of a replay attack, and is randomly
// generated with each access.
unsigned long currentNumber = 0;

// password is your password. It is loaded in from the password.h file.
// In order to use your own password, change the value of PASSWORD to
// your own value.
String password = PASSWORD;

// doorPin is connected to a relay. It closes the connection that sends
// the signal to the door by writing low.
int doorPin = 3;

// seedPin is a pin that should be left unconnected. The value it produces
// on analogue read is the seed for the random number generator.
int seedPin = 4;

// This is a nicer way of referring to "the largest number an arduino can
// easily handle"
unsigned long maxRandom = 4294967295UL;

// How much of the incoming http requests should be stored. The arduino will
// keep track of the first bufferLength characters. This ended up being
// neccessary due to resource issues.
int bufferLength = 100;

// Enter a MAC address and IP address for your controller below.
// The IP address will be dependent on your local network:
byte mac[] = {
  0x90, 0xA2, 0xDA, 0x0F, 0x04, 0x0C
};
IPAddress ip(10, 13, 37, 40);

// Initialize the Ethernet server library
// with the IP address and port you want to use
// (port 80 is default for HTTP):
EthernetServer server(80);

void setup() {
  // Set doorPin up as a digital output pin, and set its value to high.
  pinMode(doorPin, OUTPUT);
  digitalWrite(doorPin, HIGH);
  
  // Open serial communications and wait for port to open:
  Serial.begin(9600);

  // Start the Ethernet connection and the server:
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
  
  // Seed the random number generator with the value of the unconnected
  // seedPin.
  randomSeed(analogRead(seedPin));

}


void loop() {
  // :isten for incoming clients
  EthernetClient client = server.available();
  if (client) {
    Serial.println("new client");
    // An http request ends with a blank line
    boolean currentLineIsBlank = true;
    
    // Initialize lineBuffer (where the HTTP request is stored) in
    // anticipation of a new HTTP request.
    String lineBuffer = "";
    
    while (client.connected()) {
      if (client.available()) {
        // Read in the HTTP request character by character.
        char c = client.read();
        Serial.write(c);
        
        // Append each character to lineBuffer, assuming lineBuffer
        // isn't already bufferLength long.
        if (lineBuffer.length() < bufferLength)
        {
          lineBuffer += c;
        }
        
        // If you've gotten to the end of the line (received a newline
        // character) and the line is blank, the http request has ended,
        // so you can send a reply
        if (c == '\n' && currentLineIsBlank) {
                    
            // Standard header          
            client.println("HTTP/1.1 200 OK");

            // Headers to allow the client, on a different host, to make GET requests. (CORS stuff)
            client.println("Access-Control-Allow-Origin: *");
            client.println("Access-Control-Allow-Headers: origin, x-csrftoken, content-type, accept, Authorization");
            client.println("Access-Control-Allow-Methods: POST, OPTIONS");
            client.println("Content-Type: text/html");

          // If the first character of the HTTP request is "O", then it's an OPTIONS request. 
          // Send headers to keep the connection alive after the response is terminated, and 
          // indicating that the response has no body.
          if (lineBuffer[0] == 'O')
          {
            client.println("Connection: keep-alive");
            client.println("Content-Length: 0");
          }
          
          // If the first character of the HTTP request is "G", then it's a GET request.
          if (lineBuffer[0] == 'G')
          {
            
            // Close the connection after the GET response.
            client.println("Connection: close"); 
            
            // Let the client know you're responding with JSON.
            client.println("Content-Type: application/json;charset=utf-8");
            
            // Print an empty line to begin the body of the response.
            client.println();
            
            // body will contain the body of the response.
            String body;
            
            // If the http request had the value of "key" as -1, the client was requesting a random
            // number to add to their password before hashing to get through the security protocol.
            // Generate a new random number, and add it to body.
            if (lineBuffer.indexOf("key=-1&epoc=") != -1)
            {
              currentNumber = random() * maxRandom;
              body = "{\"key\": " + String(currentNumber) + "}";
            }
            
            // Otherwise, the user already has a random number, and they've completed their hash!
            // They're asking for access. Run the hash calculation yourself, then check to make sure that
            // you got the same result that they did.
            else
            {
              
              // Get the hash string out of the HTTP request.
              String userAnswer = lineBuffer.substring(lineBuffer.indexOf("/?key=") + String("/?key=").length(), lineBuffer.indexOf("&epoc="));
              
              // Get the epoc out of the HTTP request.
              String time = lineBuffer.substring(lineBuffer.indexOf("&epoc=") + String("&epoc=").length(), lineBuffer.indexOf(" HTTP"));
              
              // Initialize a Sha256 object, and add the currentNumber, password, and epoc to it.
              Sha256.init();
              Sha256.print(currentNumber + password + time);
              
              // Calculate the hash from the things we put into the Sha256 object.
              uint8_t* desired = Sha256.result();

              // Make a string from the output of the Sha256 object.
              String correctAnswer = makeHash(desired);
                          
              // Randomize currentNumber to prevent someone from just replaying the last packet.
              currentNumber = random() * maxRandom;
            
              // If what you calculated is the same thing that the user submit, they're legitimate! Let them in.
              if(correctAnswer == userAnswer)
              {
                openDoor();
                body = "{\"open\": true}";
              }
              
              // Otherwise, something went wrong. Don't let them in.
              else
              {
                body = "{\"open\": false}";
              }
            }


            // Add two new lines to the end of the body to terminate it.
            body += "\n\n";

            client.println();
            
            // Send the body of your response to the client.
            client.println(body);

            // Close the connection to the user.
            client.stop();
            
          }

          // Print 2 new lines to end the HTTP response.
          client.println();
          client.println();
      
          // Empty linebuffer
          lineBuffer = "";
          
        }
        if (c == '\n') {
          // You're starting a new line
            currentLineIsBlank = true;          
        }
        else if (c != '\r') {
          // You've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // Give the web browser time to receive the data
    delay(1);
    // Close the connection:
    client.stop();
    Serial.println("client disconnected");

  }
}

// The function that opens the door. Simply writes doorpin low,
// waits for one second, and then writes it high again.
void openDoor()
{
  digitalWrite(doorPin, LOW);
  delay(1000);
  digitalWrite(doorPin, HIGH);
}

// Returns a hash of type String from a uint8_t* object.
String makeHash(uint8_t* hash) {
  int i;
  String returnValue = "";
  for (i=0; i<32; i++) {
    returnValue += "0123456789abcdef"[hash[i]>>4];
    returnValue += ("0123456789abcdef"[hash[i]&0xf]);
  }
  return returnValue;
}
